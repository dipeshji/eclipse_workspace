package com.serverless.assignment.springbootawsserverless.handlers;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;
import com.serverless.assignment.springbootawsserverless.serivce.ProductService;

public class LambdaHandler implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {

	ProductService productService = new ProductService();

	@Override
	public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent apiGateWayRequest, Context context) {

		switch (apiGateWayRequest.getHttpMethod()) {
		case "POST":
			return productService.saveProduct(apiGateWayRequest, context);
		case "GET":
			if (apiGateWayRequest.getPathParameters() != null) {
				return productService.getProductById(apiGateWayRequest, context);
			}
			return productService.getProducts(apiGateWayRequest, context);
		case "DELETE":
			if (apiGateWayRequest.getPathParameters() != null) {
				return productService.deleteProductById(apiGateWayRequest, context);

			}
		default:
			throw new Error("Unsoportd Operation: " + apiGateWayRequest.getHttpMethod());
		}
	}

}
