package com.serverless.assignment.springbootawsserverless.serivce;

import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;
import com.serverless.assignment.springbootawsserverless.entity.Product;
import com.serverless.assignment.springbootawsserverless.utilitiy.Utility;

@Component
public class ProductService {
	private DynamoDBMapper dynamoDbMapper;
	private String jsonBody = null;

	public APIGatewayProxyResponseEvent saveProduct(APIGatewayProxyRequestEvent apiGatewayRequest, Context context) {
		initDynamoDb();
		Product product = Utility.convertStringToObject(apiGatewayRequest.getBody(), context);
		jsonBody = Utility.convertObjectToString(product, context);
		context.getLogger().log("Product data saved to database: " + jsonBody);
		return createApiResponse(jsonBody, 201, Utility.createHeader());
	}

	public APIGatewayProxyResponseEvent getProductById(APIGatewayProxyRequestEvent apiGatewayRequest, Context context) {
		initDynamoDb();

		int id = Integer.parseInt(apiGatewayRequest.getPathParameters().get("id"));
		Product product = dynamoDbMapper.load(Product.class, id);
		if (product != null) {
			jsonBody = Utility.convertObjectToString(product, context);
			context.getLogger().log("Get employee by id: " + jsonBody);
			return createApiResponse(jsonBody, 200, Utility.createHeader());
		} else {
			context.getLogger().log("Product not found with product id: " + id);
			jsonBody = "Product not found with product id: " + id;
			return createApiResponse(jsonBody, 400, Utility.createHeader());
		}
	}

	public APIGatewayProxyResponseEvent getProducts(APIGatewayProxyRequestEvent apiGatewayRequest, Context context) {
		initDynamoDb();
		List<Product> product = dynamoDbMapper.scan(Product.class, new DynamoDBScanExpression());
		jsonBody = Utility.convertListOfObjectToString(product, context);
		context.getLogger().log("List of products: " + jsonBody);
		return createApiResponse(jsonBody, 200, Utility.createHeader());
	}

	public APIGatewayProxyResponseEvent deleteEmployeeById(APIGatewayProxyRequestEvent apiGatewayRequest,
			Context context) {
		initDynamoDb();
		int id = Integer.parseInt(apiGatewayRequest.getPathParameters().get("id"));
		Product product = dynamoDbMapper.load(Product.class, id);
		if (product != null) {
			dynamoDbMapper.delete(product);
			context.getLogger().log("Product with product id :" + id + "have been deleted");
			jsonBody = "Product with product id :" + id + "have been deleted";
			return createApiResponse(jsonBody, 200, Utility.createHeader());
		} else {
			jsonBody = "No product found with product id: " + id;
			return createApiResponse(jsonBody, 400, Utility.createHeader());
		}
	}

	private void initDynamoDb() {
		AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard().build();
		dynamoDbMapper = new DynamoDBMapper(client);
	}

	private APIGatewayProxyResponseEvent createApiResponse(String body, int statusCode, Map<String, String> headers) {
		APIGatewayProxyResponseEvent event = new APIGatewayProxyResponseEvent();
		event.setBody(body);
		event.setHeaders(headers);
		event.setStatusCode(statusCode);
		return event;
	}
}
