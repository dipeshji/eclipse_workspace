package com.aws.trigger.lambdatrigger;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.LambdaLogger;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.S3Event;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.util.IOUtils;
import com.fasterxml.jackson.databind.ObjectMapper;

public class S3EventHandler implements RequestHandler<S3Event, Boolean> {
	private static final AmazonS3 s3Client = AmazonS3Client.builder()
			.withCredentials(new DefaultAWSCredentialsProviderChain()).build();

	private DynamoDBMapper dynamoDbMapper;

	@Override
	public Boolean handleRequest(S3Event s3Event, Context context) {
		final LambdaLogger logger = context.getLogger();

		// check if are getting any record
		if (input.getRecords().isEmpty()) {
			logger.log("No records found");
			return false;
		}
		// process the records
		 String bucketName = s3Event.getRecords().get(0).getS3().getBucket().getName();
	        String fileName = s3Event.getRecords().get(0).getS3().getObject().getKey();
	        try {
	            InputStream inputStream = s3client.getObject(bucketName, fileName).getObjectContent();
	            String content = IOUtils.toString(inputStream, StandardCharsets.UTF_8);
	            context.getLogger().log("file content ::: " + content);
	            //read content from s3 bucket & save to dynamoDB table
	            Employee employee = new ObjectMapper().readValue(content, Employee.class);
	            initDynamoDB();
	            dynamoDBMapper.save(employee);
	            context.getLogger().log("successfully save data to dynamoDB");

	        } catch (IOException e) {
	            return "Error while reading file from S3 :::" + e.getMessage();
	        }
		}return true;

	}

	private void initDynamoDB() {
		AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard().build();
		dynamoDbMapper = new DynamoDBMapper(client);
	}
}
